{"version":3,"file":"static/js/2270.95ba252e.chunk.js","mappings":"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","sources":["views/mobileView/screens/mintboxpro/PortfolioScreen/ETFScreen.js","views/mobileView/screens/mintboxpro/PortfolioScreen/cards/Note.js"],"sourcesContent":["import db from 'libs/db';\nimport React from 'react';\nimport { toast } from \"react-toastify\";\nimport Modal from 'react-bootstrap/Modal';\nimport AdminServices from 'services/api/AdminServices';\nimport MainHeader from 'views/mobileView/components/molecules/Headers/MainHeader';\nimport cssVar from 'views/mobileView/styles';\nimport Tabs from 'views/mobileView/components/atoms/Tabs';\nimport HomePortfolioCard from \"views/mobileView/components/molecules/Cards/HomePortfolioCard\";\nimport { HiOutlineExternalLink, HiOutlineHome } from 'react-icons/hi';\nimport { IoEllipsisVerticalCircleOutline } from 'react-icons/io5';\nimport ActivityLoaderMintbox from 'views/mobileView/components/atoms/ActivityLoaderMintbox';\nimport TransactionCard from './cards/TransactionCard';\nimport Note from './cards/Note';\nimport AMCIcon from 'views/mobileView/components/atoms/AMCIcon';\nimport SIPs from './cards/SIPs';\n\nexport default function ETFScreen(props) {\n\n  const [loading, setLoading] = React.useState(true);\n  const [showMainModal, setShowMainModal] = React.useState(false)\n  const [showModifySipModal, setShowModifySipModal] = React.useState(false)\n\n  const [portfolio, setPortfolio] = React.useState({});\n  const [portfolioPerformance, setPortfolioPerformance] = React.useState({});\n  const [portfolioXIRR, setPortfolioXIRR] = React.useState({});\n  const [transactions, setTransactions] = React.useState([]);\n  const [user, setUser] = React.useState({});\n\n  const MINTBOXID = props.location.state.MINTBOXID || 0;\n  const FUNDCODE = props.location.state.FUNDCODE;\n  const TYPE = props.location.state.TYPE;\n  const FUNDDATA = props.location.state.FUNDDATA;\n  // let FUNDDATA = {}\n  // if(TYPE === 'ETFConsolidated'){ \n  //   FUNDDATA = portfolio?.ETFConsolidated?.find(f => f.FundCode === FUNDCODE);\n  // } else if(TYPE === 'MintboxETF'){\n  //   FUNDDATA = portfolio?.MintboxETF?.find(f => f.MintboxId === MINTBOXID && f.FundCode === FUNDCODE);\n  // } else if(TYPE === 'MintboxETFConsolidated'){\n  //   FUNDDATA = portfolio?.MintboxETFConsolidated?.find(f => f.FundCode === FUNDCODE);\n  // } \n\n  React.useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true)\n    try {\n      db.get(db.model.user).then(async (p) => {\n        setUser(p.userData);\n        await getPortfolio(p.userData.id)\n        await getPortfolioXIRR(p.userData.id)\n        await getPortfolioPerformance(p.userData.id)\n        await getTransactions(p.userData.id)\n        // await getScheduledOrders(p.userData.id)\n        setLoading(false)\n      })\n    } catch (error) {\n      toast.error(error);\n      setLoading(false)\n    }\n  };\n\n  const getPortfolio = async (id) => {\n    db.get(db.model.portfolio).then(async (p) => {\n      if (p === null) {\n        let res = await AdminServices.getPortfolio(id).then(res => res);\n        if (res.type === true) {\n          const a = await JSON.parse(res.data);\n          let aa = a.reduce((aa, f) => { return { ...aa, ...f } }, {})\n          console.log(\"Get portfolio API :\", aa)\n          setPortfolio(aa)\n          await db.set(db.model.portfolio, JSON.stringify(aa))\n        }\n      } else {\n        setPortfolio(p)\n      }\n    })\n  }\n\n  const getPortfolioPerformance = async (id) => {\n    db.get(db.model.portfolioPerformance).then(async (p) => {\n      if (p === null) {\n        let res = await AdminServices.getPortfolioPerformance(id).then(res => res);\n        if (res.type === true) {\n          const a = await JSON.parse(res.data);\n          let aa = a.reduce((aa, f) => { return { ...aa, ...f } }, {})\n          console.log(\"Get portfolioPerformance API :\", aa)\n          setPortfolioPerformance(aa)\n          await db.set(db.model.portfolioPerformance, JSON.stringify(aa))\n        }\n      } else {\n        setPortfolioPerformance(p)\n      }\n    })\n  }\n\n  const getPortfolioXIRR = async (id) => {\n    db.get(db.model.portfolioXirr).then(async (p) => {\n      if (p === null) {\n        let res = await AdminServices.getPortfolioXIRR(id).then(res => res);\n        if (res.type === true) {\n          const a = await JSON.parse(res.data);\n          const aa = a.reduce((aa, f) => { return { ...aa, ...f } }, {})\n          console.log(\"Get portfolio XIRR API :\", aa)\n          setPortfolioXIRR(aa)\n          await db.set(db.model.portfolioXirr, JSON.stringify(aa))\n        }\n      } else {\n        setPortfolioXIRR(p)\n      }\n    })\n  }\n\n  const getTransactions = async (id) => {\n    db.get(db.model.transactions).then(async (p) => {\n      if (p === null) {\n        let res = await AdminServices.getTransactions(id).then(res => res);\n        if (res.type === true) {\n          const aa = res.data;\n          console.log(\"Get transactions API :\", aa)\n          setTransactions(aa)\n          await db.set(db.model.transactions, JSON.stringify(aa))\n        }\n      } else {\n        setTransactions(p)\n      }\n    })\n  }\n\n  // const getScheduledOrders = async (id) => {\n  //   db.get(db.model.sip).then(async (p) => {\n  //     if (p === null) {\n  //       let res = await AdminServices.getScheduledOrders(id).then(res => res);\n  //       if (res.type === true) {\n  //         const aa = res.data;\n  //         console.log(\"Get Scheduled orders API :\", aa)\n  //         setSip(aa)\n  //         await db.set(db.model.sip, JSON.stringify(aa))\n  //       }\n  //     } else {\n  //       setSip(p)\n  //     }\n  //   })\n  // }\n\n  const onPortfolioRefresh = async () => {\n    await db.remove(db.model.portfolio);\n    await db.remove(db.model.portfolioXirr);\n    await db.remove(db.model.portfolioPerformance);\n    await db.remove(db.model.assetAllocation);\n    await db.remove(db.model.transactions)\n    loadData();\n  }\n\n  const MainModal = () => {\n    const [selectedOption, setSelectedOption] = React.useState()\n\n    const onConfirm = () => {\n      switch (selectedOption) {\n        case 'redeem': {\n          props.history.push({\n            pathname: '/portfolio/redeem-etf',\n            state: { fundData: FUNDDATA }\n          })\n          setShowMainModal(false);\n          break;\n        }\n        case 'sip': {\n          setShowMainModal(false);\n          props.history.push({\n            pathname: '/portfolio/confirm-invest',\n            state: { fundData: {...FUNDDATA, MinSIPAmount:FUNDDATA.NAV}, type: 1, sip: true }\n          })\n          break;\n        }\n        default: setShowMainModal(false)\n      }\n    }\n    return (\n      <Modal\n        className=\"bottom-drawer\"\n        show={showMainModal}\n        onHide={() => setShowMainModal(false)}\n        keyboard={false}\n      >\n        <Modal.Body>\n          {\n            TYPE=== 'ETFConsolidated'?\n              <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n                <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"sip\" id=\"sip\" />\n                <label className=\"bodyTextDark radio-label\" htmlFor=\"sip\">Start a SIP</label>\n              </div>\n              :\n              <></>  \n          }\n          <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n            <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"redeem\" id=\"redeem\" />\n            <label className=\"bodyTextDark radio-label\" htmlFor=\"redeem\" style={{ color: cssVar.getPropertyValue('--peach') }}>Redeem</label>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button className=\"outlineButton\" onClick={() => setShowMainModal(false)}>\n            Close\n          </button>\n          <button className=\"solidButton\" onClick={() => onConfirm()}>\n            Confirm\n          </button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n\n  const ModifySipModal = () => {\n    const [selectedOption, setSelectedOption] = React.useState()\n\n    const onConfirm = () => {\n      switch (selectedOption) {\n        case 'editAmount': {\n          setShowModifySipModal(false);\n          break;\n        }\n        case 'editDate': {\n          setShowModifySipModal(false);\n          break;\n        }\n        case 'pauseSip': {\n          setShowModifySipModal(false);\n          break;\n        }\n        case 'stopSip': {\n          setShowModifySipModal(false);\n          break;\n        }\n        default: setShowModifySipModal(false)\n      }\n    }\n    return (\n      <Modal\n        className=\"bottom-drawer\"\n        show={showModifySipModal}\n        onHide={() => setShowModifySipModal(false)}\n        keyboard={false}\n      >\n        <Modal.Body>\n          <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n            <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"editAmount\" id=\"editAmount\" />\n            <label className=\"bodyTextDark radio-label\" htmlFor=\"editAmount\">Edit SIP amount</label>\n          </div>\n          <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n            <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"editDate\" id=\"editDate\" />\n            <label className=\"bodyTextDark radio-label\" htmlFor=\"editDate\">Edit SIP date</label>\n          </div>\n          <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n            <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"pauseSip\" id=\"pauseSip\" />\n            <label className=\"bodyTextDark radio-label\" htmlFor=\"pauseSip\">Pause SIP</label>\n          </div>\n          <div className=\"radio-item\" style={{ marginTop: \"6%\" }}>\n            <input type=\"radio\" name=\"fund\" onChange={(e) => { setSelectedOption(e.target.value) }} value=\"stopSip\" id=\"stopSip\" />\n            <label className=\"bodyTextDark radio-label\" htmlFor=\"stopSip\" style={{ color: cssVar.getPropertyValue('--peach') }}>Stop SIP</label>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button className=\"outlineButton\" onClick={() => setShowModifySipModal(false)}>\n            Close\n          </button>\n          <button className=\"solidButton\" onClick={() => onConfirm()}>\n            Confirm\n          </button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n\n  // const SIPs = () => {\n  //   return (\n  //     <div style={{ marginTop: '2%' }}>\n  //       {\n  //         portfolio?.ScheduledOrders?.filter(t => t.ToFundCode === FUNDCODE).length === 0 ?\n  //           <NotFound text=\"You don't have any active SIPs\" buttonText='Start SIP now' onClick={() => {\n  //             props.history.push({\n  //               pathname: '/portfolio/confirm-invest',\n  //               state: { fundData: {...FUNDDATA, MinSIPAmount:FUNDDATA.NAV}, type: 1, sip: true }\n  //             })\n  //           }} />\n  //           :\n  //           portfolio?.ScheduledOrders?.filter(t => t.ToFundCode === FUNDCODE).map((t, i) => {\n  //             return (\n  //               <div key={i} style={{ padding: \"4%\", borderBottom: '1px solid ' + cssVar.getPropertyValue('--light') }}>\n  //                 <div className='chip-sip' style={{ marginBottom: \"1%\" }}>\n  //                   <BsDot size={36} color={t.IsDeleted === 1 ? cssVar.getPropertyValue('--red') : t.IsActive === 0 ? cssVar.getPropertyValue('--gold') : cssVar.getPropertyValue('--secondaryGreen')} style={{ margin: \"0 -4px 0 -12px\" }} />\n  //                   {t.IsDeleted === 1 ? 'Stopped' : t.IsActive === 0 ? 'Paused' : 'Active'}\n  //                 </div>\n  //                 <div style={{ display: \"flex\", alignItems: \"center\", gap: \"6px\" }}>\n  //                   <div style={{ flex: 1 }}>\n  //                     <div className='smallTextLight' style={{ marginBottom: \"1%\" }}>\n  //                       {ordinal_suffix_of(t.OrderDate)} of every month\n  //                     </div>\n  //                     <div className='header1dark'>{CurrencyFormat(t.Amount)}</div>\n  //                   </div>\n  //                   <div className='header2dark secondaryGreen' onClick={() => setShowModifySipModal(true)}>Modify <AiOutlineDown size={12} /></div>\n  //                 </div>\n  //               </div>\n  //             )\n  //           })\n  //       }\n  //     </div>\n  //   )\n  // }\n\n  const Transactions = () => {\n    return (\n      <>\n        <Note type='transactionETF' />\n        <div style={{ marginTop: \"2%\" }}>\n          {\n            TYPE === 'ETFConsolidated' || TYPE === 'MintboxETF'?\n              transactions.filter(t => t.FundType === 1 && t.FundCode === FUNDCODE && t.MintboxId === MINTBOXID).reverse().map((trx,i) => {\n                return <TransactionCard trx={trx} i={i} type={1}/>\n              })\n              :\n              TYPE === 'MintboxETFConsolidated'?\n                transactions.filter(t => t.FundType === 1 && t.FundCode === FUNDCODE && t.MintboxId !== 0).reverse().map((trx,i) => {\n                  return <TransactionCard trx={trx} i={i} type={1} />\n                })\n                :\n                <></>\n          }\n        </div>\n      </>\n    )\n  }\n\n  const MoreInfo = () => {\n    return (\n      <div style={{ marginTop: \"2%\" }}>\n        <div style={{ display: \"flex\", padding: \"4%\", borderBottom: \"1px solid \" + cssVar.getPropertyValue('--light') }}>\n          <div style={{ flex: 1 }}>\n            <div className='smallTextLight'>Ticker</div>\n            <div className='bodyTextDark'>{FUNDDATA?.FundCode}</div>\n          </div>\n          <div style={{ flex: 1 }}>\n            <div className='smallTextLight'>Units owned</div>\n            <div className='bodyTextDark'>{FUNDDATA?.Units}</div>\n          </div>\n        </div>\n        {/* <div style={{ display: \"flex\", padding: \"4%\", borderBottom: \"1px solid \" + cssVar.getPropertyValue('--light') }}>\n          <div style={{ flex: 1 }}>\n            <div className='smallTextLight'>Category</div>\n            <div className='bodyTextDark'>Test category</div>\n          </div>\n        </div> */}\n      </div>\n    )\n  }\n\n  const keyTitles = [\n    { title: 'SIPs', view: SIPs({navigation:props.history, TYPE:1, FUNDCODE:FUNDCODE, FUNDDATA:FUNDDATA}), show: TYPE==='ETFConsolidated'},\n    { title: 'Transactions', view: Transactions(), show: true },\n    { title: 'More info.', view: MoreInfo(), show: true }\n  ];\n\n\n\n  if (loading) {\n    return (\n      <ActivityLoaderMintbox />\n    );\n  }\n\n  return (\n    <div className='mainContainer'>\n      <MainHeader\n        navigation={props.history}\n        header=\"ETF\"\n      />\n      <div className=\"dataContainer px-0\">\n        <div style={{ margin: \"4% 4% 2%\" }}>\n          <div style={{ display: \"flex\", gap: \"4%\" }}>\n            <AMCIcon amcName={FUNDDATA?.AMCName} width=\"40px\" height=\"40px\" />\n            <div style={{ flex: 1 }}>\n              <div className='header1dark'>{FUNDDATA?.ETFName}</div>\n              {/* <div>\n                <span className='smallTextLight'>NAV </span>\n                <span className='smallTextDark'>{CurrencyFormat(FUNDDATA?.NAV,'long',2)}</span>\n              </div> */}\n            </div>\n            <HiOutlineExternalLink size={24} className='secondaryGreen' onClick={() => props.history.push(\"/etf-detail/\" + FUNDCODE)}  style={{alignSelf:'center'}} />\n          </div>\n        </div>\n        {\n          TYPE === 'ETFConsolidated' ?\n            <HomePortfolioCard\n              navigation={props.history}\n              balance={FUNDDATA?.ETFBalance}\n              previousBalance={portfolio.PrevETFConsolidated?.find(f => f.FundCode === FUNDCODE)?.PrevETFBalance}\n              xirr={portfolioXIRR.ETFXIRR[FUNDCODE]?.XIRR}\n              onRefresh={() => { onPortfolioRefresh() }}\n              growthChartData={portfolioPerformance?.ETFs?.filter(f => f.FundCode === FUNDCODE && f.MintboxId === 0)?.map(d => [new Date(d[\"NavDateStr\"]).getTime(), d[\"Balance\"]])}\n            />\n            :\n            TYPE === 'MintboxETF'?\n              <HomePortfolioCard\n                navigation={props.history}\n                balance={FUNDDATA?.MintboxETFBalance}\n                previousBalance={portfolio.PrevMintboxETF?.find(f => f.FundCode === FUNDCODE && f.MintboxId === MINTBOXID && f.GoalId === 0)?.PrevMintboxETFBalance}\n                xirr={Object.values(portfolioXIRR?.MintboxETFXIRR || {})?.find(f => f.FundCode === FUNDCODE && f.MintboxId === MINTBOXID && f.GoalId === 0)?.XIRR}\n                onRefresh={() => { onPortfolioRefresh() }}\n                growthChartData={portfolioPerformance?.ETFs?.filter(f => f.FundCode === FUNDCODE && f.MintboxId === MINTBOXID)?.map(d => [new Date(d[\"NavDateStr\"]).getTime(), d[\"Balance\"]])}\n              />\n              :\n              TYPE === 'MintboxETFConsolidated'?\n              <HomePortfolioCard\n                navigation={props.history}\n                balance={FUNDDATA?.MintboxETFConsolidated}\n                previousBalance={portfolio?.PrevMintboxETFConsolidated?.find(f => f.FundCode === FUNDCODE)?.PrevMintboxETFConsolidated}\n                xirr={Object.values(portfolioXIRR?.MintboxETFConsolidatedXIRR || {})?.find(f => f.FundCode === FUNDCODE)?.XIRR}\n                onRefresh={() => { onPortfolioRefresh() }}\n                growthChartData={portfolioPerformance?.ETFConsolidated?.filter(f => f.FundCode === FUNDCODE)?.map(d => [new Date(d[\"NavDateStr\"]).getTime(), d[\"Balance\"]])}\n              />\n              :\n              <></>\n        }\n        <Tabs tabsObject={keyTitles.filter(k => k.show)} color={cssVar.getPropertyValue('--darkGreen')} />\n      </div>\n      {\n        TYPE === 'ETFConsolidated' || TYPE=== 'MintboxETF' ?\n          <div className='bottom-nav'>\n            <div className='bn-tab' onClick={() => { props.history.push('/dashboard') }}>\n              <HiOutlineHome size={20} className='footerIcon' />\n              <div className='footerText'>Home</div>\n            </div>\n            <div className='bn-tab' style={{ flex: 3 }}>\n              <button\n                className='solidButton'\n                onClick={() => props.history.push({\n                  pathname: '/portfolio/confirm-invest',\n                  state:{ fundData: {...FUNDDATA, MinSIPAmount:FUNDDATA.NAV}, type: 1}\n                })}>\n                Invest more\n              </button>\n            </div>\n            <div className='bn-tab'>\n              <IoEllipsisVerticalCircleOutline\n                size='48'\n                color={cssVar.getPropertyValue('--secondaryGreen')}\n                onClick={() => setShowMainModal(true)} />\n            </div>\n          </div>\n          :\n          ''\n      }\n      <MainModal />\n      <ModifySipModal />\n    </div>\n  );\n}\n","import db from \"libs/db\"\nimport React from \"react\"\nimport { AiOutlineRight } from \"react-icons/ai\"\nimport cssVar from \"views/mobileView/styles\"\n\nconst Note = ({ type, goalDate }) => {\n    const [dismissed, setDismissed] = React.useState({})\n    React.useEffect(() => {\n        db.get(db.model.dismissNotes).then(p => {\n            setDismissed(p)\n        })\n    }, [])\n\n    const onDismiss = async () => {\n        setDismissed({ ...dismissed, [type]: true })\n        await db.set(db.model.dismissNotes, JSON.stringify({ ...dismissed, [type]: true }))\n    }\n\n    const note = type === 'etf' ?\n        {\n            header: 'Important',\n            body: 'Only ETFs invested in independently (and not as a part of a mintbox) are shown below'\n        }\n        :\n        type === 'transactionETF' ?\n            {\n                header: 'Note',\n                body: 'Transactions initiated on mintbox are shown below. Transactions initiated on other apps will not appear.'\n            }\n            :\n            type === 'transactionMF' ?\n                {\n                    header: 'Note',\n                    body: 'Transactions initiated on mintbox are shown below. Transactions initiated on other apps will not appear.'\n                }\n                :\n                type === 'goal' ?\n                    {\n                        header: '',\n                        body: 'You planned for this goal on '+ new Date(goalDate).toDateString()\n                    }\n                    :\n                    {}\n    return (\n        dismissed?.[type] ?\n            <></>\n            :\n            <div style={{ padding: \"4%\", borderBottom: \"1px solid \" + cssVar.getPropertyValue('--light') }} onClick={() => onDismiss()}>\n                <div style={{ padding: \"2% 4%\", backgroundColor: cssVar.getPropertyValue('--moderateRisk'), borderRadius: \"8px\" }}>\n                    <div className='header2dark'>{note.header}</div>\n                    <div className='smallTextLight' style={{ margin: \"2px 0\" }}>{note.body}</div>\n                    <div className='header3dark secondaryGreen'> Tap to dismiss <AiOutlineRight size={12} /></div>\n                </div>\n            </div>\n    )\n}\n\nexport default Note"],"names":["ETFScreen","props","React","loading","setLoading","showMainModal","setShowMainModal","showModifySipModal","setShowModifySipModal","portfolio","setPortfolio","portfolioPerformance","setPortfolioPerformance","portfolioXIRR","setPortfolioXIRR","transactions","setTransactions","setUser","MINTBOXID","location","state","FUNDCODE","TYPE","FUNDDATA","loadData","db","then","p","userData","getPortfolio","id","getPortfolioXIRR","getPortfolioPerformance","getTransactions","error","toast","a","AdminServices","res","type","JSON","parse","data","aa","reduce","f","console","log","stringify","onPortfolioRefresh","MainModal","selectedOption","setSelectedOption","className","show","onHide","keyboard","style","marginTop","name","onChange","e","target","value","htmlFor","color","cssVar","onClick","history","push","pathname","fundData","MinSIPAmount","NAV","sip","onConfirm","ModifySipModal","keyTitles","title","view","SIPs","navigation","filter","t","FundType","FundCode","MintboxId","reverse","map","trx","i","display","padding","borderBottom","flex","Units","header","margin","gap","amcName","AMCName","width","height","ETFName","size","alignSelf","balance","ETFBalance","previousBalance","PrevETFConsolidated","find","PrevETFBalance","xirr","ETFXIRR","XIRR","onRefresh","growthChartData","ETFs","d","Date","getTime","MintboxETFBalance","PrevMintboxETF","GoalId","PrevMintboxETFBalance","Object","values","MintboxETFXIRR","MintboxETFConsolidated","PrevMintboxETFConsolidated","MintboxETFConsolidatedXIRR","ETFConsolidated","tabsObject","k","goalDate","dismissed","setDismissed","onDismiss","note","body","toDateString","backgroundColor","borderRadius"],"sourceRoot":""}