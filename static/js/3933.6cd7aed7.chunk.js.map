{"version":3,"file":"static/js/3933.6cd7aed7.chunk.js","mappings":"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","sources":["views/mobileView/components/atoms/MinInvestment.js","views/mobileView/screens/mintboxpro/BuildYourOwnMintbox/BuildMintbox.js"],"sourcesContent":["const allowedError = 2;\nconst minInvestment = (arr, type = 0) => {\n  if (arr.length === 0) {\n    return 0\n  } else if (arr.length === 1) {\n    return arr[0].NAV\n  } else {\n    // initialize equal weights\n    if (type) {\n      if (100 % arr.length === 0) {\n        arr = arr.map((obj) => ({ ...obj, allocation: (100 / arr.length).toFixed(0) }))\n      } else {\n        arr = arr.map((obj) => ({ ...obj, allocation: ((100 - (100 % arr.length)) / arr.length).toFixed(0) }))\n        arr[0].allocation = Number(arr[0].allocation) + (100 % arr.length)\n      }\n    }\n\n    const requiredAllocation = arr.map(e => e.allocation)\n    let quantities = arr.map(e => 1)\n    let t = 0\n    while (t < 10000) {\n      t++\n      const totalAmount = arr.reduce((sum, e, i) => sum + (e.NAV * quantities[i]), 0)\n      const actualAllocation = arr.map((e, i) => e.NAV * quantities[i] * 100 / totalAmount)\n      const diffArr = actualAllocation.map((a, i) => requiredAllocation[i] - a)\n      const maxDiff = Math.max.apply(Math, diffArr)\n      const minDiff = Math.min.apply(Math, diffArr)\n      // console.log(quantities, diffArr, actualAllocation)\n      if (minDiff > -1 * allowedError && maxDiff < allowedError) {\n        return totalAmount\n      } else {\n        const indexOfMaxDiff = diffArr.indexOf(maxDiff);\n        quantities[indexOfMaxDiff]++\n      }\n    }\n  }\n}\nexport { minInvestment }","import React from 'react'\nimport { toast } from \"react-toastify\";\nimport MainHeader from 'views/mobileView/components/molecules/Headers/MainHeader'\nimport { FiMinusCircle } from 'react-icons/fi'\nimport cssVar from 'views/mobileView/styles'\nimport db from 'libs/db'\nimport SearchScreen from 'views/mobileView/components/pages/SearchScreen';\nimport { minInvestment } from 'views/mobileView/components/atoms/MinInvestment'\nimport AMCIcon from 'views/mobileView/components/atoms/AMCIcon';\n\nconst BuildMintbox = (props) => {\n\n    const [selectedETFs, setSelectedETFs] = React.useState([]);\n\n    React.useEffect(async () => {\n        await getSelectedETFs();\n    }, []);\n\n    React.useEffect(() => {\n        console.log(selectedETFs)\n        saveData(selectedETFs)\n    }, [selectedETFs]);\n\n    const getSelectedETFs = async () => {\n        try {\n            await db.get(db.model.createMintbox).then((u) => {\n                if (u?.selectedETFs) {\n                    setSelectedETFs(u.selectedETFs)\n                }\n            })\n        } catch (error) {\n            toast.error(error);\n        }\n    };\n\n    const saveData = async (arr) => {\n        const dataFinal = {\n            selectedETFs: arr\n        };\n        await db.get(db.model.createMintbox).then(async (u) => {\n            if (u) { Object.assign(u, dataFinal) }\n            else { u = dataFinal }\n            await db.set(db.model.createMintbox,JSON.stringify(u));\n        })\n    }\n\n    const onSearchItemClick = (item) => {\n        if(selectedETFs.length === 10){\n            toast.error(\"Maximum 10 ETFs allowed\");\n            return;\n        }\n        if (selectedETFs.findIndex(f => f.Symbol === item.Symbol) === -1) {\n            setSelectedETFs([...selectedETFs, item])\n        }\n    }\n    const Footer = () => {\n        const initializeEqualWeights = async (arr) => {\n            const unlockedETFsCount = arr.filter(f => !f.isLocked).length;\n            if (unlockedETFsCount === 0) {\n                return\n            }\n            const lockedWeight = arr.reduce((sum, f) => {\n                if (f.isLocked) {\n                    return sum + f.allocation\n                }\n                return sum\n            }, 0)\n            console.log(\"lockedWeight\", lockedWeight)\n            const remainingWeight = 100 - lockedWeight;\n            const firstNotLockedIndex = arr.findIndex((f) => !f.isLocked)\n            console.log('unlockedETFsCount:', unlockedETFsCount)\n            console.log('remainingWeight:', remainingWeight)\n            let newArr = arr.map((fund, i) => {\n                if (fund.isLocked) {\n                    return fund;\n                }\n                if (i === firstNotLockedIndex) { return { ...fund, allocation: Math.floor(remainingWeight / unlockedETFsCount) + remainingWeight % unlockedETFsCount } }\n                else return { ...fund, allocation: Math.floor(remainingWeight / unlockedETFsCount) }\n            })\n            saveData(newArr)\n        }\n\n        const onNextPress = async () => {\n            if (selectedETFs.length >= 2) {\n                await initializeEqualWeights(selectedETFs);\n                props.history.push('/CreateMintbox/define-weights')\n            }\n        }\n\n        return (\n            <>\n                <div className=\"bodyTextLight\" style={{ position: \"fixed\", bottom: '70px', width: \"100%\", textAlign: \"center\", borderTop: \"1px solid \"+cssVar.getPropertyValue('--light'), padding: \"2% 4%\", backgroundColor: cssVar.getPropertyValue('--white') }}>\n                    Min investment <span className='header2dark'>â‚¹ {Number(minInvestment(selectedETFs, 1)).toFixed(2)}</span>\n                </div>\n                <div className='footer'>\n                    <div className='bodyTextDark' style={{ flex: 1, paddingRight: \"2%\" }}>\n                        Define ETF weightages on the next screen\n                    </div>\n                    <div style={{ flex: 1 }}>\n                        <button\n                            className='solidButton'\n                            style={{ opacity: selectedETFs.length >= 2 ? 1 : 0.4 }}\n                            onClick={() => { onNextPress() }}\n                        >\n                            Confirm Selection\n                        </button>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    const DisplaySelectedETFs = () => {\n        const onDelete = (id) => {\n            setSelectedETFs(selectedETFs.filter(f => f.Symbol !== id));\n        }\n        return (\n            <>\n                <div className=\"header2dark\" style={{ marginLeft : \"4%\", marginTop:\"2%\"}}>{selectedETFs.length} ETFs selected</div>\n                <div className=\"smallTextLight\" style={{ marginLeft: \"4%\"}}>Min 2 | Max 10</div>\n                {selectedETFs.map((fund) => {\n                    return (\n                        <div style={{ padding: \"4%\", borderBottom: \"1px solid \"+cssVar.getPropertyValue('--light') }} key={fund.Symbol}>\n                            <div style={{ display: \"flex\", gap: \"4%\" }}>\n                                <AMCIcon amcName={fund.AMCName} height='24px' width='24px' />\n                                <div style={{ flex: \"1\" }}>\n                                    <div className='header2dark'>{fund.ETFName}</div>\n                                    <div className='smallTextLight'>NAV â‚¹ {Number(fund.NAV).toFixed(2)}</div>\n                                    <div className='header3dark secondaryGreen' style={{marginTop:'2%'}} onClick={()=>props.history.push(\"/ETF-detail/\"+fund.Symbol)}>View details</div>\n                                </div>\n                                <FiMinusCircle size={32} style={{ backgroundColor: \"#FFE7E5\", color: '#FF8080', borderRadius: \"50%\", margin: \"auto 0\" }} onClick={() => onDelete(fund.Symbol)} />\n                            </div>\n                        </div>\n                    )\n                })}\n                {selectedETFs.length === 1 && <div style={{ margin: \"4%\", fontSize: \"14px\", fontWeight: \"400\", color: \"#333333\" }}>Add at least <b>one more</b> ETF to build your own mintbox</div>}\n            </>\n        )\n    }\n\n    return (\n        <div className=\"mainContainer\">\n            <MainHeader\n                header=\"Build your own mintbox\"\n                navigation={props.history}\n            />\n            <div className=\"dataContainer px-0\" style={{paddingBottom:\"110px\", paddingTop:\"2%\" }}>\n                <div>\n                    <SearchScreen \n                        searchText ='Search by ETF name'\n                        navigation={props.history}\n                        type={1}\n                        showPlusIcon={true}\n                        plusIconAction={(item)=>onSearchItemClick(item)}\n                        showViewDetails={true}\n                        viewDetailsAction={(item)=>props.history.push(\"/ETF-detail/\"+item.Symbol)}\n                    /> \n                </div>\n                {selectedETFs.length === 0 ?\n                    <div className='bodyTextDark' style={{ margin: \"4%\", fontSize:\"16px\" }}>Search and add ETFs to start building!</div>\n                    :\n                    <>\n                        <DisplaySelectedETFs />\n                        <Footer />\n                    </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default BuildMintbox\n"],"names":["minInvestment","arr","type","length","NAV","map","obj","allocation","toFixed","Number","requiredAllocation","e","quantities","t","totalAmount","reduce","sum","i","diffArr","a","maxDiff","Math","max","apply","min","indexOfMaxDiff","indexOf","props","React","selectedETFs","setSelectedETFs","getSelectedETFs","console","log","saveData","db","then","u","toast","dataFinal","Object","assign","JSON","stringify","Footer","initializeEqualWeights","unlockedETFsCount","filter","f","isLocked","lockedWeight","remainingWeight","firstNotLockedIndex","findIndex","newArr","fund","floor","onNextPress","history","push","className","style","position","bottom","width","textAlign","borderTop","cssVar","padding","backgroundColor","flex","paddingRight","opacity","onClick","DisplaySelectedETFs","marginLeft","marginTop","borderBottom","display","gap","amcName","AMCName","height","ETFName","Symbol","size","color","borderRadius","margin","id","fontSize","fontWeight","header","navigation","paddingBottom","paddingTop","searchText","showPlusIcon","plusIconAction","item","onSearchItemClick","showViewDetails","viewDetailsAction"],"sourceRoot":""}