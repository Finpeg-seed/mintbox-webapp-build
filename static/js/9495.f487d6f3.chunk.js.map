{"version":3,"file":"static/js/9495.f487d6f3.chunk.js","mappings":"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","sources":["views/mobileView/screens/mintboxpro/BuildYourOwnMintbox/ReplaceETF.js"],"sourcesContent":["import db from 'libs/db';\nimport React from 'react';\nimport { toast } from \"react-toastify\";\nimport MainHeader from 'views/mobileView/components/molecules/Headers/MainHeader';\nimport SearchScreen from 'views/mobileView/components/pages/SearchScreen';\nimport { AiOutlineRight } from 'react-icons/ai';\nimport cssVar from 'views/mobileView/styles';\nimport { FiMinusCircle } from 'react-icons/fi';\nimport AMCIcon from 'views/mobileView/components/atoms/AMCIcon';\nconst ReplaceETF = (props) => {\n    const [selectedETFs, setSelectedETFs] = React.useState([]);\n    const [replacementFund, setReplacementFund] = React.useState({});\n\n    const fundToReplace = props.location.state?.fundToReplace;\n\n    React.useEffect(async () => {\n        await getSelectedETFs();\n    }, []);\n\n    const getSelectedETFs = async () => {\n        try {\n            await db.get(db.model.createMintbox).then((u) => {\n                if (u?.selectedETFs) {\n                    setSelectedETFs(u.selectedETFs)\n                }\n            })\n        } catch (error) {\n            toast.error(error);\n        }\n    };\n\n    const saveData = async (arr) => {\n        const dataFinal = {\n            selectedETFs: arr\n        };\n        await db.get(db.model.createMintbox).then(async (u) => {\n            if (u) { Object.assign(u, dataFinal) }\n            else { u = dataFinal }\n            await db.set(db.model.createMintbox,JSON.stringify(u));\n        })\n    }\n\n    const onSearchItemClick = (fund) => {\n        if(selectedETFs.some(f => f.Symbol === fund.Symbol)){\n            toast.error(\"Fund already exists\")\n            return;\n        } else {\n            setReplacementFund(fund);\n        }\n        \n    }\n    const Footer = () => {\n        const onNextPress = () => {\n            if(replacementFund.Symbol){\n                const newArr = selectedETFs.map((fund)=>{\n                    if(fund.Symbol === fundToReplace.Symbol){ \n                        return {...replacementFund,allocation:fundToReplace.allocation,isLocked:fundToReplace.isLocked}\n                    }\n                    else return fund\n                })\n                saveData(newArr);\n                props.history.goBack();\n            }\n        }\n        return (\n            <>\n                <div className='footer'>\n                    <button\n                        className='solidButton'\n                        style={{ opacity: replacementFund.Symbol ? 1 : 0.4 }}\n                        onClick={() => { onNextPress() }}\n                    >\n                        Confirm replacement <AiOutlineRight size={14}/>\n                    </button>\n                </div>\n            </>\n        )\n    }\n    return (\n        <div className='mainContainer'>\n            <MainHeader\n                header=\"Build your own mintbox\"\n                navigation={props.history}\n            />\n            <div className=\"dataContainer px-0\" style={{paddingTop:\"2%\" }}>\n                <div style={{ display: \"flex\", gap:\"10px\", margin:\"4%\", alignItems:'center' }}>\n                    <div className=\"header1light\" style={{ flex: 1 }}>Selecting replacement of \n                        <div className=\"header1dark\">'{fundToReplace.ETFName}'</div>\n                    </div>\n                    <div>\n                        <div className='greenChipHeader' style={{color:cssVar.getPropertyValue('--peach'),borderColor:cssVar.getPropertyValue('--peach')}} onClick={()=>props.history.goBack()}>Cancel</div>\n                    </div>\n                </div>\n                {\n                    replacementFund.Symbol ?\n                    <>\n                        <div style={{ padding: \"4%\", borderBottom: \"1px solid \"+cssVar.getPropertyValue('--light'),marginTop:\"4%\" }}>\n                            <div style={{ display: \"flex\", gap: \"4%\" }}>\n                                <AMCIcon amcName={replacementFund.AMCName} height='24px' width='24px' />\n                                <div style={{ flex: \"1\" }}>\n                                    <div className='header2dark'>{replacementFund.ETFName}</div>\n                                    <div className='smallTextLight'>NAV â‚¹ {Number(replacementFund.NAV).toFixed(2)}</div>\n                                </div>\n                                <FiMinusCircle size={32} style={{ backgroundColor: \"#FFE7E5\", color: '#FF8080', borderRadius: \"50%\", margin: \"auto 0\" }} onClick={()=>setReplacementFund({})}/>\n                            </div>\n                        </div>\n                        <Footer />\n                    </>\n                    :\n                    <SearchScreen \n                        searchText ='Search by ETF name'\n                        navigation={props.history}\n                        type={1}\n                        showPlusIcon={true}\n                        plusIconAction={(item)=>onSearchItemClick(item)}\n                        showViewDetails={true}\n                        viewDetailsAction={(item)=>props.history.push(\"/ETF-detail/\"+item.Symbol)}\n                    /> \n                }\n            </div>\n        </div>\n    )\n}\n\nexport default ReplaceETF\n"],"names":["props","React","selectedETFs","setSelectedETFs","replacementFund","setReplacementFund","fundToReplace","location","state","getSelectedETFs","db","then","u","toast","saveData","arr","dataFinal","Object","assign","JSON","stringify","Footer","className","style","opacity","Symbol","onClick","newArr","map","fund","allocation","isLocked","history","goBack","onNextPress","size","header","navigation","paddingTop","display","gap","margin","alignItems","flex","ETFName","color","cssVar","borderColor","padding","borderBottom","marginTop","amcName","AMCName","height","width","Number","NAV","toFixed","backgroundColor","borderRadius","searchText","type","showPlusIcon","plusIconAction","item","some","f","showViewDetails","viewDetailsAction","push"],"sourceRoot":""}